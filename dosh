#!/bin/bash
#
# Copyright (c) 2017-2019 GaÃ«l PORTAY <gael.portay@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the MIT License.
#

# Called as program loader (shebang #!/usr/bin/dosh)
__="$_"
if [ "$__" != "/bin/bash" ] && [ "$__" = "$1" ]; then
	exec <"$1"
	shift
	set -- -s "$@"
	exec "$0" "$@"
elif [ "$__" != "/bin/bash" ] && [ "$__" = "$2" ]; then
	args="$1"
	shift
	exec <"$1"
	shift
	# shellcheck disable=SC2086
	set -- $args -s "$@"
	exec "$0" "$@"
fi

set -e
set -o pipefail

VERSION="1.5.1"

usage() {
	cat <<EOF
Usage: ${0##*/}    [(-|+)abefhmnuvxC] [(-|+)o shopt] [SCRIPT_FILE  [ARGS...]]
       ${0##*/} -c [(-|+)abefhmnuvxC] [(-|+)o shopt] COMMAND [NAME [ARGS...]]
       ${0##*/} -s [(-|+)abefhmnuvxC] [(-|+)o shopt]               [ARGS...]

Run a shell as user in a container and bind mount cwd.

POSIX Shell related options:
      -c                        Read commands from command-line.
      -i                        Set interactive.
      -s                        Read commands from standard-input.
      -abefhmnuvxC or -o shopt, 
      +abefhmnuvxC or +o shopt  For a more thorough description of shopts,
                                please refers to sh help.

Bash specific options:
      -klprtBDEHIPT or -O shopt,
      +klprtBDEHIPT or +O shopt For a more thorough description of shopts,
                                please refers to bash help.

Dash specific options:
      -pEIV, +pEIV              For a more thorough description of shopts,
                                please refers to dash help.

Zsh specific options:
      -0123456789dgklprtxyBDEFGHIJKLMNOPQRSTUVWXYZ,
      +0123456789dgklprtxyBDEFGHIJKLMNOPQRSTUVWXYZ
                                For a more thorough description of shopts,
                                please refers to zsh help.

Docker related options:
      --dockerfile FILE         Path to the Dockerfile to use.
      --context TAR             Path to the context to send to docker daemon.
      --no-auto-context         Disable automatic context sent to docker daemon.
      --directory DIR           Change to directory before doing anything else.
      --root                    Run as root.
      --home                    Bind mount home directory.
      --shell SHELL             Set shell interpretor.
                                Equivalent to set DOSHELL=<SHELL>.
      --build                   Build image.
      --rmi                     Remove image.
      --detach                  Detach container.
      --exec CONTAINER          Execute in container.
      --tag                     Print docker tag and exit.
      --no-do                   Do nothing; echo docker commands.

Miscellaneous options:
      --verbose                 Turn on verbose mode.
      --version                 Print version.
      --help                    Print usage.

Environment variables:
      DOCKER                    The docker executable.

      DOSHELL                   The full pathname to the shell to run in docker
                                image.
                                Equivalent to --shell <SHELL>.

      DOSHLVL                   Incremented by one each time an instance of dosh
                                is started.

      DOSH_DOCKERFILE           The filename of the Dockerfile to use.
                                Equivalent to --dockerfile <FILE>.

      DOSH_DOCKER_RUN_EXTRA_OPTS
                                Set additionnal parameters to docker run
                                command.

      DOSH_DOCKER_EXEC_EXTRA_OPTS
                                Set additionnal parameters to docker exec
                                command.

      DOSH_DOCKER_BUILD_EXTRA_OPTS
                                Set additionnal parameters to docker build
                                command.

      DOSH_DOCKER_RMI_EXTRA_OPTS
                                Set additionnal parameters to docker rmi
                                command.
EOF
}

get_tag() {
	echo "dosh-$(realpath "$1" | sha256sum - | cut -d' ' -f1)"
}

docker_build() {
	local iid
	local files
	local context_file

	if [ -n "$DOSH_NOBUILD" ]; then
		return
	fi

	files=("$1")
	context_file="$3"
	if ! [[ $context_file ]]; then
		context_file="$1"
		while read -r -a words; do
			if [[ ${words[0]^^} =~ ^(ADD|COPY)$ ]]; then
				# Remove keyword and destination path
				unset 'words[0]'
				unset 'words[-1]'

				for word in "${words[@]}"; do
					# Skip long option and sources with schema://
					if [[ $word =~ ^-- ]] ||
					   [[ $word =~ ^.*\:// ]]; then
						continue
					fi

					files+=("$word")
				done
			elif [[ ${words[0]^^} =~ ^ENTRYPOINT$ ]]; then
				echo "Info: ENTRYPOINT is overridden by dosh"
			fi
		done <"$1" >&2
	fi

	# Build inital image
	# Do not send build context to the daemon if neither ADD nor COPY instructions in Dockerfile.
	# shellcheck disable=SC2086 disable=SC2154
	if [[ ${#files[@]} -gt 1 ]] && [[ $no_auto_context ]]; then
		echo "Info: ADD or COPY sends build context to daemon" >&2
		echo "      Consider option --context <TAR> to speed up the build of image." >&2
		echo "      First, generate the context archive as suggested by the command below:" >&2
		echo "          tar cf context.tar ${files[*]}" >&2
		echo "      Then, run dosh again and tell it to use the context archive:" >&2
		echo "          $0 --context context.tar ${BASH_ARGV[*]}" >&2
		$do $DOCKER build "${buildopts[@]}" --file "$1" --iidfile .iid .
	else
		if ! [[ $context_file ]]; then
			tar c "${files[@]}"
		else
			cat "$context_file"
		fi | \
		$do $DOCKER build "${buildopts[@]}" --file "$1" --iidfile .iid -
	fi

	# Build final image
	# Inject both user and group id.
	iid="$(cat .iid 2>/dev/null || true)"
	# shellcheck disable=SC2086
	cat - <<EOF | $do $DOCKER build "${buildopts[@]}" --tag "$2" $DOSH_DOCKER_BUILD_EXTRA_OPTS -
FROM $iid

USER root
RUN groupadd --non-unique --gid ${GROUPS[0]} $USER \
 || addgroup -g ${GROUPS[0]} $USER
RUN useradd  --non-unique --gid ${GROUPS[0]} --uid $UID --create-home --home-dir $HOME --shell /bin/sh $USER \
 || adduser  -G $USER -u $UID -h $HOME -s /bin/sh -D $USER
EOF
}

docker_rmi() {
	# shellcheck disable=SC2086
	$do $DOCKER rmi $DOSH_DOCKER_RMI_EXTRA_OPTS "$1"
}

is_doshopt() {
	if [[ "$1" =~ ^--(no-auto-context|root|home|build|rmi|detach)$ ]]; then
		return 0
	fi

	return 1
}

is_doshopt_argument() {
	if [[ "$1" =~ ^--(dockerfile|context|directory|shell|detach|exec)$ ]]; then
		return 0
	fi

	return 1
}

is_shopt() {
	# Do not handle -o shoptname here
	# sh (only)
	if [[ "$1" =~ ^[-+][abcefhimnsuvxC]$ ]]; then
		return 0
	fi

	# bash (specific)
	if [ "${DOSHELL##*/}" == "bash" ] &&
	   [[ "$1" =~ ^[-+][klprtBDEHIPT]$ ]]; then
		return 0
	fi

	# dash (specific)
	if [ "${DOSHELL##*/}" == "dash" ] &&
	   [[ "$1" =~ ^[-+][pEIV]$ ]]; then
		return 0
	fi

	# zsh (specific)
	if [ "${DOSHELL##*/}" == "zsh" ] &&
	   [[ "$1" =~ ^[-+][0123456789dgklprtxyBDEFGHIJKLMNOPQRSTUVWXYZ]$ ]]; then
		return 0
	fi

	return 1
}

is_shopt_argument() {
	# sh (only)
	if [[ "$1" =~ ^[-+][o]$ ]]; then
		return 0
	fi

	# bash (specific)
	if [ "${DOSHELL##*/}" == "bash" ] &&
	   [[ "$1" =~ ^[-+]O$ ]]; then
		return 0
	fi

	return 1
}

shopts=()
dockerfile="${DOSH_DOCKERFILE:-Dockerfile}"
directory="."
opts=()
buildopts=("--quiet")
DOSHELL="${DOSHELL:-/bin/sh}"
DOCKER="${DOCKER:-docker}"
while [ "$#" -ne 0 ]; do
	if [ "$1" = "--help" ]; then
		usage
		exit 0
	elif [ "$1" = "--version" ]; then
		echo "$VERSION"
		exit
	elif is_doshopt "$1"; then
		optname="${1//-/_}"
		optname="${optname:2}"
		eval "$optname=1"
	elif is_doshopt_argument "$1"; then
		optname="${1//-/_}"
		optname="${optname:2}"
		eval "$optname=\"$2\""
		shift
	elif [ "$1" = "--tag" ]; then
		get_tag "$directory/$dockerfile"
		exit
	elif [ "$1" = "--no-do" ]; then
		# shellcheck disable=SC2209
		do=echo
	elif [ "$1" = "--verbose" ]; then
		verbose=true
		buildopts=()
	elif is_shopt "$1"; then
		shopts+=("$1")
		eval "opt_${1:1:1}=1"
	elif is_shopt_argument "$1"; then
		shopts+=("$1" "$2")
		eval "opt_${1:1:1}=\"$2\""
		shift
	elif [ "$1" = "--" ]; then
		shift
		break
	else
		break
	fi
	shift
done

# Apply dosh options to dosh environment variables
# --shell SHELL to DOSHELL
# shellcheck disable=SC2154
if [[ $shell ]]; then
	DOSHELL="$shell"
fi
# --dockerfile FILE to DOSH_DOCKERFILE
if [[ $dockerfile ]]; then
	DOSH_DOCKERFILE="$dockerfile"
fi

# Change directory
cd "$directory"

# Source local profile
if [ -e ".doshrc" ]; then
	. .doshrc
fi

# Remove image and exit
# shellcheck disable=SC2154
if [[ $rmi ]]; then
	# Remove image if exist
	tag="$(get_tag "$DOSH_DOCKERFILE")"
	docker_rmi "$tag" >&2
	exit
fi

# Run in a new container
# shellcheck disable=SC2154
if ! [[ $exec ]]; then
	# Rebuild or automatically build image if it does not exist
	tag="$(get_tag "$DOSH_DOCKERFILE")"
	imageid="$($DOCKER images -q "$tag")"
	if [[ $build ]] || ! [[ $imageid ]]; then
		# Reset quiet option when image does not exist or if verbose option is set
		if ! [[ $imageid ]] || [[ $verbose ]]; then
			buildopts=()
		fi	
		docker_build "$DOSH_DOCKERFILE" "$tag" "$context" >&2
	fi

	# Detach container
	if [[ $detach ]]; then
		opts+=("--detach")
	# Remove the container at exit
	else
		opts+=("--rm")
	fi

	# Bind mount home
	if [[ $home ]]; then
		opts+=("--volume" "$HOME:/home/$USER")
	# Bind mount current working directory
	else
		opts+=("--volume" "$PWD:$PWD")
	fi
fi

# Set current user privileges
# shellcheck disable=SC2154
if ! [[ $root ]]; then
	opts+=("--user" "$UID:${GROUPS[0]}")
fi

# Set interactive
# shellcheck disable=SC2154
if [[ $opt_i ]] || [[ $opt_s ]] || [ "$#" -eq 0 ]; then
	opts+=("--interactive")

	# Allocate a pseudo-TTY if stdin/stderr are TTY
	if [ -t 0 ] && [ -t 2 ]; then
		opts+=("--tty")
	fi
fi

# Change to present working directory
opts+=("--workdir" "$PWD")

# Run command from arguments
# shellcheck disable=SC2154
if [[ $opt_c ]]; then
	command="$1"
	shift
	set -- "${shopts[@]}" "$command" "$@"
# Read command from stdin or no command or invalid
else
	set -- "${shopts[@]}" "$@"
fi

# Execute in existing container
# shellcheck disable=SC2086
if [[ $exec ]]; then
	exec $do $DOCKER exec "${opts[@]}" $DOSH_DOCKER_EXEC_EXTRA_OPTS "$exec" "$DOSHELL" "$@"
# Run in a new container
else
	opts+=("--env" "DOSHLVL=$((DOSHLVL+1))")
	opts+=("--entrypoint" "$DOSHELL")
	if [[ $verbose ]]; then
		echo "$tag"
	fi >&2
	exec $do $DOCKER run "${opts[@]}" $DOSH_DOCKER_RUN_EXTRA_OPTS "$tag" "$@"
fi
