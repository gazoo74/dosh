#!/bin/bash
#
# Copyright (c) 2017 GaÃ«l PORTAY <gael.portay@savoirfairelinux.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the MIT License.
#

# Called as program loader (shebang #!/usr/bin/dosh)
__="$_"
if [ "$__" != "/bin/bash" ] && [ "$__" = "$1" ]; then
	exec <"$1"
	shift
	set -- -s "$@"
	exec "$0" "$@"
elif [ "$__" != "/bin/bash" ] && [ "$__" = "$2" ]; then
	args="$1"
	shift
	exec <"$1"
	shift
	# shellcheck disable=SC2086
	set -- $args -s "$@"
	exec "$0" "$@"
fi

set -e
set -o pipefail

VERSION="1.1"

usage() {
	cat <<EOF
Usage: ${0##*/} [OPTIONS] [COMMAND] [ARG...]

Run a shell as user in a container and bind mount cwd.

POSIX Shell related options:
      -c                        Read commands from command-line.
      -i                        Set interactive.
      -s                        Read commands from standard-input.

Docker related options:
      -F or --dockerfile FILE   Path to the Dockerfile to use.
      -C or --directory DIR     Change to directory before doing anything else.
            --root              Run as root.
            --home              Bind mount home directory.
            --sh                Set /bin/sh as default shell.
                                Equivalent to set DOSHELL=/bin/sh,
                                           or set --shell /bin/sh.
                                This option is deprecated; use --shell instead.
            --shell SHELL       Set shell interpretor.
            --build             Build image.
            --rmi               Remove image.
            --detach            Detach container.
            --exec CONTAINER    Execute in container.
            --tag               Print docker tag and exit.
      -N or --no-do             Do nothing; echo docker commands.

Miscellaneous options:
      -v or --verbose           Turn on verbose mode.
      -V or --version           Print version.
      -h or --help              Print usage.

Environment variables:
      DOSHELL                   The full pathname to the shell to run in docker
                                image.

      DOSHLVL                   Incremented by one each time an instance of dosh
                                is started.

      DOSH_DOCKERFILE           The filename of the Dockerfile to use.

      DOSH_DOCKER_RUN_EXTRA_OPTS
                                Set additionnal parameters to docker run
                                command.

      DOSH_DOCKER_EXEC_EXTRA_OPTS
                                Set additionnal parameters to docker exec
                                command.

      DOSH_DOCKER_BUILD_EXTRA_OPTS
                                Set additionnal parameters to docker build
                                command.

      DOSH_DOCKER_RMI_EXTRA_OPTS
                                Set additionnal parameters to docker rmi
                                command.
EOF
}

get_tag() {
	echo "dosh-$(realpath "$1" | sha256sum - | cut -d' ' -f1)"
}

docker_build() {
	if [ -n "$DOSH_NOBUILD" ]; then
		return
	fi

	# shellcheck disable=SC2086
	cat "$1" - <<EOF | \
	$do docker build $buildopts --tag "$2" $DOSH_DOCKER_BUILD_EXTRA_OPTS -

RUN groupadd --non-unique --gid ${GROUPS[0]} $USER \
 || addgroup -g ${GROUPS[0]} $USER
RUN useradd  --non-unique --gid ${GROUPS[0]} --uid $UID --create-home --home-dir /home/$USER --shell /bin/sh $USER \
 || adduser  -G $USER -u $UID -h /home/$USER -s /bin/sh -D $USER
EOF
}

docker_rmi() {
	# shellcheck disable=SC2086
	$do docker rmi $DOSH_DOCKER_RMI_EXTRA_OPTS "$1"
}

opt_i=false
opt_s=false
opt_c=false
DOSH_DOCKERFILE="${DOSH_DOCKERFILE:-Dockerfile}"
directory="."
root=false
dwd="/home/$USER"
home=false
build=false
rmi=false
detach=false
exec=false
buildopts="--quiet"
verbose=false
DOSHELL="${DOSHELL:-/bin/sh}"
while [ "$#" -ne 0 ]; do
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		usage
		exit 0
	elif [ "$1" = "-V" ] || [ "$1" = "--version" ]; then
		echo "$VERSION"
		exit
	elif [ "$1" = "-F" ] || [ "$1" = "--dockerfile" ]; then
		shift
		DOSH_DOCKERFILE="$1"
	elif [ "$1" = "-C" ] || [ "$1" = "--directory" ]; then
		shift
		directory="$1"
	elif [ "$1" = "--root" ]; then
		root=true
	elif [ "$1" = "--home" ]; then
		dwd="$PWD"
		home=true
	elif [ "$1" = "--sh" ]; then
		DOSHELL="/bin/sh"
	elif [ "$1" = "--shell" ]; then
		shift
		DOSHELL="$1"
	elif [ "$1" = "--build" ]; then
		build=true
	elif [ "$1" = "--rmi" ]; then
		rmi=true
	elif [ "$1" = "--detach" ]; then
		detach=true
	elif [ "$1" = "--exec" ]; then
		shift
		container="$1"
		exec=true
	elif [ "$1" = "--tag" ]; then
		get_tag "$directory/$DOSH_DOCKERFILE"
		exit
	elif [ "$1" = "-N" ] || [ "$1" = "--no-do" ]; then
		do=echo
	elif [ "$1" = "-v" ] || [ "$1" = "--verbose" ]; then
		verbose="true"
		buildopts=
	elif [ "$1" = "-c" ]; then
		shift
		opt_c=true
		break
	elif [ "$1" = "-i" ]; then
		opt_i=true
	elif [ "$1" = "-s" ]; then
		shift
		opt_s=true
		break
	elif [ "$1" = "--" ]; then
		shift
		break
	else
		break
	fi
	shift
done

# Change directory
cd "$directory"

if $rmi; then
	# Remove image if exist
	tag="$(get_tag "$DOSH_DOCKERFILE")"
	docker_rmi "$tag" >&2
	exit
fi

# Run in a new container
if ! $exec; then
	# Rebuild or automatically build image if it does not exist
	tag="$(get_tag "$DOSH_DOCKERFILE")"
	imageid="$(docker images -q "$tag")"
	if $build || [ -z "$imageid" ]; then
		[ -n "$imageid" ] || buildopts=
		docker_build "$DOSH_DOCKERFILE" "$tag" >&2
	fi

	# Detach container
	if $detach; then
		opts="--detach"
	# Remove the container at exit
	else
		opts="--rm"
	fi

	# Bind mount home
	if $home; then
		dwd="$PWD"
		opts+=" --volume $HOME:/home/$USER"
	# Bind mount current working directory
	else
		dwd="/home/$USER"
		opts+=" --volume $PWD:/home/$USER"
	fi
fi

# Set current user privileges
if ! $root; then
	opts+=" --user $UID:${GROUPS[0]}"
fi

# Set interactive
if $opt_i || $opt_s || [ "$#" -eq 0 ]; then
	opts+=" --interactive"

	# Allocate a pseudo-TTY if stdin/stderr are TTY
	if [ -t 0 ] && [ -t 2 ]; then
		opts+=" --tty"
	fi
fi

# Read command from stdin
if $opt_s; then
	set -- "$DOSHELL" -c "cd $dwd && $DOSHELL -s $(eval echo "${@// /\\\\ }")"
# Run command from arguments
elif $opt_c; then
	set -- "$DOSHELL" -c "cd $dwd && $DOSHELL -c '$*'"
# No command or invalid
else
	set -- "$DOSHELL" -c "cd $dwd && $DOSHELL $*"
fi

# Execute in existing container
# shellcheck disable=SC2086
if $exec; then
	exec $do docker exec $opts $DOSH_DOCKER_EXEC_EXTRA_OPTS "$container" "$@"
# Run in a new container
else
	opts+=" --env DOSHLVL=$((DOSHLVL+1))"
	if $verbose; then
		echo "$tag"
	fi >&2
	exec $do docker run $opts $DOSH_DOCKER_RUN_EXTRA_OPTS "$tag" "$@"
fi
